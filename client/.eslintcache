[{"/home/batman/Alanify/client/src/App.js":"1","/home/batman/Alanify/client/src/reportWebVitals.js":"2","/home/batman/Alanify/client/src/index.js":"3","/home/batman/Alanify/client/src/components/PlaylistCard.js":"4"},{"size":5463,"mtime":1606250416310,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1606169400343,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1606169400341,"results":"8","hashOfConfig":"6"},{"size":1049,"mtime":1606250410884,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1on0krs",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/batman/Alanify/client/src/App.js",["20","21","22","23","24"],"import React, { useEffect, useState } from \"react\";\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport wordsToNumbers from \"words-to-numbers\";\n\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\n\nimport \"./App.css\";\nimport { Box, Button, Container, Grid, makeStyles } from \"@material-ui/core\";\nimport PlaylistCard from \"./components/PlaylistCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  info: {\n    marginTop: \"1rem\",\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#000\",\n    },\n    secondary: {\n      main: \"#fff\",\n    },\n  },\n});\n\nconst App = () => {\n  const [spotifyConnected, setSpotifyConnected] = useState(false);\n  const [nowPlaying, setNowPlaying] = useState({ name: \"\", albumArt: \"\", artists: [], uri: \"\" });\n  const [me, setMe] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n\n  const classes = useStyles();\n\n  const spotify = new SpotifyWebApi();\n\n  useEffect(() => {\n    const getMeAsync = async () => {\n      try {\n        const res = await spotify.getMe();\n        setMe(res);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const { access_token } = getHashParams();\n\n    if (access_token) {\n      spotify.setAccessToken(access_token);\n      getMeAsync();\n      setSpotifyConnected(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const getPlaylistsAsync = async () => {\n      try {\n        const res = await spotify.getUserPlaylists();\n        setPlaylists(res);\n      } catch (e) {\n        console.log(\"GET PLAYLISTSERROR: \", e);\n      }\n    };\n\n    if (spotifyConnected) {\n      getPlaylistsAsync();\n    }\n  }, [spotifyConnected]);\n\n  useEffect(() => {\n    const getCurrentSongCmd = async () => {\n      const np = await getNowPlaying();\n      instance.callProjectApi(\"setClientData\", { value: np }, function (error, result) {\n        if (error) {\n          alert(error);\n        }\n      });\n    };\n\n    const addSongToPlaylistCmd = async (i) => {\n      const locPlaylists = await getPlaylists();\n      const playlistId = getPlaylistIdByIdx(locPlaylists, i - 1);\n      const np = await getNowPlaying();\n\n      console.log({ playlistid: playlistId });\n      console.log({ nowplaying: np });\n      try {\n        const res = await spotify.addTracksToPlaylist(playlistId, [np.uri]);\n\n        const newItems = locPlaylists.items;\n        newItems[i - 1] = { ...newItems[i - 1], added: true };\n        setPlaylists({ ...playlists, items: newItems });\n\n        const max = 5;\n        let counter = 0;\n\n        const interval = setInterval(() => {\n          counter++;\n          if (counter > max) {\n            newItems[i - 1] = { ...newItems[i - 1], added: false };\n            setPlaylists({ ...playlists, items: newItems });\n            clearInterval(interval);\n          }\n        }, 1000);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const instance = alanBtn({\n      key: process.env.REACT_APP_ALAN_KEY,\n      onCommand: ({ command, number }) => {\n        switch (command) {\n          case \"getNowPlaying\": {\n            getCurrentSongCmd();\n            break;\n          }\n          case \"addToPlaylist\": {\n            if (typeof number === \"string\") {\n              number = wordsToNumbers(number, { fuzzy: true });\n            }\n            addSongToPlaylistCmd(number);\n            break;\n          }\n        }\n      },\n    });\n  }, []);\n\n  const getPlaylists = async () => {\n    try {\n      const res = await spotify.getUserPlaylists();\n      return res;\n    } catch (e) {\n      return { error: e };\n    }\n  };\n\n  const getPlaylistIdByIdx = (p, idx) => {\n    return p.items[idx].id;\n  };\n\n  const getNowPlaying = async () => {\n    try {\n      const res = await spotify.getMyCurrentPlaybackState();\n      console.log({ spotifySong: res });\n      const now = { name: res.item.name, artists: res.item.artists, uri: res.item.uri };\n      setNowPlaying({\n        ...nowPlaying,\n        name: res.item.name,\n        albumArt: res.item.album.images[0].url,\n        artists: res.item.artists,\n        uri: res.item.uri,\n      });\n      return now;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  };\n\n  const getHashParams = () => {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  };\n\n  if (!me) {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={theme}>\n          <Button onClick={() => window.location.assign(\"http://localhost:8888\")}>Continue with Spotify!</Button>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n\n  if (!playlists) {\n    <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <Container maxWidth=\"lg\">\n          <Box className={classes.info}></Box>\n          {playlists && (\n            <Grid container spacing={6}>\n              {playlists.items.map((playlist, i) => (\n                <Grid key={playlist.id} item xs={12} sm={6} md={3}>\n                  <PlaylistCard playlist={playlist} idx={i + 1} added={playlist.added} />\n                </Grid>\n              ))}\n            </Grid>\n          )}\n        </Container>\n      </MuiThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","/home/batman/Alanify/client/src/reportWebVitals.js",[],"/home/batman/Alanify/client/src/index.js",[],"/home/batman/Alanify/client/src/components/PlaylistCard.js",["25","26","27","28"],"import React, { useEffect } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport \"./animation.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: \"#141414\",\n    position: \"relative\",\n    height: \"100%\",\n    \"& img\": {\n      width: \"100%\",\n      opacity: \"30%\",\n    },\n  },\n  name: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%,-50%)\",\n    backgroundColor: \"#141414\",\n    color: \"#fff\",\n    width: \"100%\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    fontWeight: 800,\n  },\n}));\n\nconst PlaylistCard = ({ playlist, idx, added }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Box className={classes.root}>\n        <img src={playlist.images[0].url} />\n        <Typography className={classes.name}>{playlist.name}</Typography>\n        <p className={added ? \"index added\" : \"index\"}>{idx}</p>\n      </Box>\n    </div>\n  );\n};\n\nexport default PlaylistCard;\n",{"ruleId":"29","severity":1,"message":"30","line":58,"column":6,"nodeType":"31","endLine":58,"endColumn":8,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"30","line":73,"column":6,"nodeType":"31","endLine":73,"endColumn":24,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":93,"column":15,"nodeType":"36","messageId":"37","endLine":93,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":118,"column":9,"nodeType":"40","messageId":"41","endLine":130,"endColumn":10},{"ruleId":"29","severity":1,"message":"42","line":133,"column":6,"nodeType":"31","endLine":133,"endColumn":8,"suggestions":"43"},{"ruleId":"34","severity":1,"message":"44","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":26},{"ruleId":"34","severity":1,"message":"45","line":2,"column":22,"nodeType":"36","messageId":"37","endLine":2,"endColumn":30},{"ruleId":"46","severity":1,"message":"47","line":20,"column":5,"nodeType":"48","messageId":"49","endLine":20,"endColumn":8},{"ruleId":"50","severity":1,"message":"51","line":37,"column":9,"nodeType":"52","endLine":37,"endColumn":45},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'spotify'. Either include it or remove the dependency array.","ArrayExpression",["53"],["54"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'getNowPlaying', 'getPlaylists', 'playlists', and 'spotify'. Either include them or remove the dependency array. You can also do a functional update 'setPlaylists(p => ...)' if you only need 'playlists' in the 'setPlaylists' call.",["55"],"'useEffect' is defined but never used.","'useTheme' is defined but never used.","no-dupe-keys","Duplicate key 'top'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [spotify]",{"range":"62","text":"63"},"Update the dependencies array to be: [spotify, spotifyConnected]",{"range":"64","text":"65"},"Update the dependencies array to be: [getNowPlaying, getPlaylists, playlists, spotify]",{"range":"66","text":"67"},[1431,1433],"[spotify]",[1744,1762],"[spotify, spotifyConnected]",[3486,3488],"[getNowPlaying, getPlaylists, playlists, spotify]"]