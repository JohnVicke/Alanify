{"version":3,"sources":["components/PlaylistCard.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","position","height","width","opacity","name","top","left","PlaylistCard","playlist","idx","added","classes","Box","className","src","images","url","Typography","info","marginTop","createMuiTheme","palette","primary","main","secondary","App","useState","spotifyConnected","setSpotifyConnected","albumArt","artists","uri","nowPlaying","setNowPlaying","me","setMe","playlists","setPlaylists","spotify","SpotifyWebApi","useEffect","getMeAsync","a","getMe","res","console","log","access_token","getHashParams","setAccessToken","getUserPlaylists","getPlaylistsAsync","getCurrentSongCmd","getNowPlaying","np","instance","callProjectApi","value","error","result","alert","addSongToPlaylistCmd","i","getPlaylists","locPlaylists","playlistId","getPlaylistIdByIdx","playlistid","nowplaying","addTracksToPlaylist","newItems","items","counter","interval","setInterval","clearInterval","alanBtn","key","process","onCommand","command","number","wordsToNumbers","fuzzy","p","id","getMyCurrentPlaybackState","spotifySong","now","item","album","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","Container","maxWidth","Grid","container","spacing","map","xs","sm","md","Button","onClick","assign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d27b5d93.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport \"./animation.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: \"#141414\",\n    position: \"relative\",\n    height: \"100%\",\n    \"& img\": {\n      width: \"100%\",\n      opacity: \"30%\",\n    },\n  },\n  name: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%,-50%)\",\n    backgroundColor: \"#141414\",\n    color: \"#fff\",\n    width: \"100%\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    fontWeight: 800,\n  },\n}));\n\nconst PlaylistCard = ({ playlist, idx, added }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Box className={classes.root}>\n        <img src={playlist.images[0].url} />\n        <Typography className={classes.name}>{playlist.name}</Typography>\n        <p className={added ? \"index added\" : \"index\"}>{idx}</p>\n      </Box>\n    </div>\n  );\n};\n\nexport default PlaylistCard;\n","import React, { useEffect, useState } from \"react\";\n\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport wordsToNumbers from \"words-to-numbers\";\n\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\n\nimport \"./App.css\";\nimport { Box, Button, Container, Grid, makeStyles } from \"@material-ui/core\";\nimport PlaylistCard from \"./components/PlaylistCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  info: {\n    marginTop: \"1rem\",\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#000\",\n    },\n    secondary: {\n      main: \"#fff\",\n    },\n  },\n});\n\nconst App = () => {\n  const [spotifyConnected, setSpotifyConnected] = useState(false);\n  const [nowPlaying, setNowPlaying] = useState({ name: \"\", albumArt: \"\", artists: [], uri: \"\" });\n  const [me, setMe] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n\n  const classes = useStyles();\n\n  const spotify = new SpotifyWebApi();\n\n  useEffect(() => {\n    const getMeAsync = async () => {\n      try {\n        const res = await spotify.getMe();\n        setMe(res);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const { access_token } = getHashParams();\n\n    if (access_token) {\n      spotify.setAccessToken(access_token);\n      getMeAsync();\n      setSpotifyConnected(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const getPlaylistsAsync = async () => {\n      try {\n        const res = await spotify.getUserPlaylists();\n        setPlaylists(res);\n      } catch (e) {\n        console.log(\"GET PLAYLISTSERROR: \", e);\n      }\n    };\n\n    if (spotifyConnected) {\n      getPlaylistsAsync();\n    }\n  }, [spotifyConnected]);\n\n  useEffect(() => {\n    const getCurrentSongCmd = async () => {\n      const np = await getNowPlaying();\n      instance.callProjectApi(\"setClientData\", { value: np }, function (error, result) {\n        if (error) {\n          alert(error);\n        }\n      });\n    };\n\n    const addSongToPlaylistCmd = async (i) => {\n      const locPlaylists = await getPlaylists();\n      const playlistId = getPlaylistIdByIdx(locPlaylists, i - 1);\n      const np = await getNowPlaying();\n\n      console.log({ playlistid: playlistId });\n      console.log({ nowplaying: np });\n      try {\n        const res = await spotify.addTracksToPlaylist(playlistId, [np.uri]);\n\n        const newItems = locPlaylists.items;\n        newItems[i - 1] = { ...newItems[i - 1], added: true };\n        setPlaylists({ ...playlists, items: newItems });\n\n        const max = 5;\n        let counter = 0;\n\n        const interval = setInterval(() => {\n          counter++;\n          if (counter > max) {\n            newItems[i - 1] = { ...newItems[i - 1], added: false };\n            setPlaylists({ ...playlists, items: newItems });\n            clearInterval(interval);\n          }\n        }, 1000);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const instance = alanBtn({\n      key: process.env.REACT_APP_ALAN_KEY,\n      onCommand: ({ command, number }) => {\n        switch (command) {\n          case \"getNowPlaying\": {\n            getCurrentSongCmd();\n            break;\n          }\n          case \"addToPlaylist\": {\n            if (typeof number === \"string\") {\n              number = wordsToNumbers(number, { fuzzy: true });\n            }\n            addSongToPlaylistCmd(number);\n            break;\n          }\n        }\n      },\n    });\n  }, []);\n\n  const getPlaylists = async () => {\n    try {\n      const res = await spotify.getUserPlaylists();\n      return res;\n    } catch (e) {\n      return { error: e };\n    }\n  };\n\n  const getPlaylistIdByIdx = (p, idx) => {\n    return p.items[idx].id;\n  };\n\n  const getNowPlaying = async () => {\n    try {\n      const res = await spotify.getMyCurrentPlaybackState();\n      console.log({ spotifySong: res });\n      const now = { name: res.item.name, artists: res.item.artists, uri: res.item.uri };\n      setNowPlaying({\n        ...nowPlaying,\n        name: res.item.name,\n        albumArt: res.item.album.images[0].url,\n        artists: res.item.artists,\n        uri: res.item.uri,\n      });\n      return now;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  };\n\n  const getHashParams = () => {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  };\n\n  if (!me) {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={theme}>\n          <Button onClick={() => window.location.assign(\"http://localhost:8888\")}>Continue with Spotify!</Button>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n\n  if (!playlists) {\n    <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <Container maxWidth=\"lg\">\n          <Box className={classes.info}></Box>\n          {playlists && (\n            <Grid container spacing={6}>\n              {playlists.items.map((playlist, i) => (\n                <Grid key={playlist.id} item xs={12} sm={6} md={3}>\n                  <PlaylistCard playlist={playlist} idx={i + 1} added={playlist.added} />\n                </Grid>\n              ))}\n            </Grid>\n          )}\n        </Container>\n      </MuiThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}